package cc.mallet.util.tests;

import cc.mallet.util.QR;
import cc.mallet.types.MatrixOps;
import static org.junit.Assert.assertEquals;
import org.junit.Test;

public class TestQR {
    @Test
    public void testQR() {
        // Random gaussian matrix, generated by R
        double[][] A = new double[][] { {0.3023496, -0.2352895, -0.08332658},
            {1.1871093,  0.4090436,  0.18437203},
            {0.5707067, -1.0149112,  1.14817968} };
        // QR decomp, generated by R. I modified the signs of rows/columns to match the Java output.
        double[][] Q = new double[][] { {0.2237265, -0.1869610, -0.9565522},
            {0.8784129, 0.4639149, 0.1147770},
            {0.4222999, -0.8659264, 0.2680190} };
        double[][] R = new double[][] { {1.351425, -0.1219282, 0.6281886},
            {0.000000, 1.1125898, -0.8931274},
            {0.000000, 0.0000000, 0.4086019} };
        
        QR decomposition = new QR(MatrixOps.deepClone(A));
        
        MatrixOps.print(decomposition.getQ());
        MatrixOps.print(Q);
        
        double diff = MatrixOps.sumSquaredDiff(decomposition.getQ(), Q);
        assertEquals(0.0, diff, 0.01);
        
        MatrixOps.print(decomposition.getR());
        MatrixOps.print(R);
        
        diff = MatrixOps.sumSquaredDiff(decomposition.getR(), R);
        assertEquals(0.0, diff, 0.01);
        
        double[][] product = MatrixOps.aTimesB(decomposition.getQ(), decomposition.getR());
        diff = MatrixOps.sumSquaredDiff(A, product);
        assertEquals(0.0, diff, 0.01);
    }
}